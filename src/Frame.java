import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.rmi.server.SocketSecurityException;

public class Frame extends javax.swing.JFrame {

	static String path = "\\C:\\Users\\Dylan\\workspace\\Password_Strength\\src\\Password_List";
	static boolean onList = false;
	static String gPassword = "argHRTHER4566!@#";
	static boolean checked = false;
	static double bits = 0.0;
	
    /**
     * Creates new form Password_Strength
     */
    public Frame() {
        initComponents();
        initilize();
    }

    private void initilize(){
    	horribleTextField.setEnabled(true);
    	badTextField.setEnabled(true);
    	okTextField.setEnabled(true);
    	strongTextField.setEnabled(true);
    	onList = false;
    	checked = false;
    	resultLabel.setText("");
    	bits = 0.0;
    	horribleTextField.setBackground(new java.awt.Color(219, 229, 241));
    	badTextField.setBackground(new java.awt.Color(219, 229, 241));
    	okTextField.setBackground(new java.awt.Color(219, 229, 241));
    	strongTextField.setBackground(new java.awt.Color(219, 229, 241));
    }
    
    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt){
    	passwordTextField.setText("");
    	initilize();
    }
    
    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt){
    	initilize();
		
    	gPassword = passwordTextField.getText().trim();
		if(!gPassword.equals("")){
			start(gPassword);
		}
		else{
			resultLabel.setText("Please enter a password.");
		}
    }
    
    private static void start(String password){
		try {
			checkList(gPassword);
		} catch (IOException e) {
			e.printStackTrace();
		}
		if(onList == false){
			checked = true;
			printResult(checkPasswordStrength(gPassword));
		}
		else{
			horribleTextField.setBackground(Color.RED);
			resultLabel.setText(gPassword + " was found in the password dictionary, this is horrible.");
		}
    }
    
    private static boolean checkList(String password) throws IOException{
		FileReader fr = new FileReader(path);
		BufferedReader reader = new BufferedReader(fr);
		
		int lines = readLines();
		String[] data = new String[lines];
		
		int i;
		for(i=0; i<lines; i++){
			data[i] = reader.readLine();
			if(data[i].equals(password.trim())){
				onList = true;
			}
		}
		
		reader.close();
		return onList;
	}
	

	private static int readLines() throws IOException{
		FileReader fr = new FileReader(path);
		BufferedReader bf = new BufferedReader(fr);
		
		String line;
		int lines = 0;
		
		while(( line = bf.readLine()) != null){
			lines++;
		}
		bf.close();
		return lines;
	}
 
    private static double checkPasswordStrength(String password){
        int l = password.length();

        if(l == 1){//one leter
            bits = 4;
        }
        if(l >= 2 && l < 9){//between 2-8
            bits = 4 + ((l-1)*2);
            System.out.println("2-8");
        }
        if(l >= 9 && l < 21){//between 9-20
            bits = 18 + ((l-8)*1.5);
            System.out.println("9-20");
        }
        if(l >= 21){//over 21
            bits = 36 + (l-20);
            System.out.println("20+");
        }

        String[] partialRegexChecks = {
                "^(.*[0-9]+.*)$",
                "(.*[a-z]+.*)",
                "(.*[A-Z]+.*)"
        };

        if (password.matches(partialRegexChecks[0]) && password.matches(partialRegexChecks[1])
                && password.matches(partialRegexChecks[2])) {
            bits = bits + 6.0;
            System.out.println("case");
        }

        if(checked == true && l < 18){
            bits = bits + 6.0;
            System.out.println("checked");
        }
        return bits;
    }
   
    private static void printResult(double bits){
        if(bits < 25){
            horribleTextField.setBackground(Color.RED);
			resultLabel.setText("Your password strength is "+ bits +" bits, this is horrible.");
        }

        else if(bits <= 32 && bits >= 25){
            badTextField.setBackground(new Color(255, 166, 48));
            resultLabel.setText("Your password strength is "+ bits +" bits, this is bad.");
        }

        else if(bits <= 48 && bits >= 33){
        	okTextField.setBackground(Color.YELLOW);
            resultLabel.setText("Your password strength is "+ bits +" bits, this is ok.");
        }

        else if(bits >= 49){
        	strongTextField.setBackground(Color.GREEN);
            resultLabel.setText("Your password strength is "+ bits +" bits, this is strong.");
        }

    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        masterPanel = new javax.swing.JPanel();
        submitButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        resultLabel = new javax.swing.JLabel();
        passwordTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        horribleTextField = new javax.swing.JTextField();
        okTextField = new javax.swing.JTextField();
        badTextField = new javax.swing.JTextField();
        strongTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        clearButton.addActionListener(new ActionListener(){
    		public void actionPerformed(ActionEvent e){
    			clearButtonActionPerformed(e);
    		}
    	});
    	
    	submitButton.addActionListener(new ActionListener(){
    		public void actionPerformed(ActionEvent e){
    			submitButtonActionPerformed(e);
    		}
    	});
        
        masterPanel.setBackground(new java.awt.Color(219, 229, 241));
        masterPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        submitButton.setBackground(new java.awt.Color(149, 179, 215));
        submitButton.setText("Submit");

        clearButton.setBackground(new java.awt.Color(149, 179, 215));
        clearButton.setText("clear");

        resultLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        resultLabel.setText("result goes here");

        passwordTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Please enter a password to check its strength");

        javax.swing.GroupLayout masterPanelLayout = new javax.swing.GroupLayout(masterPanel);
        masterPanel.setLayout(masterPanelLayout);
        masterPanelLayout.setHorizontalGroup(
            masterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(masterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(masterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(masterPanelLayout.createSequentialGroup()
                        .addComponent(resultLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(masterPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
            .addGroup(masterPanelLayout.createSequentialGroup()
                .addGap(178, 178, 178)
                .addGroup(masterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(clearButton)
                    .addComponent(submitButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, masterPanelLayout.createSequentialGroup()
                .addContainerGap(124, Short.MAX_VALUE)
                .addGroup(masterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(passwordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(masterPanelLayout.createSequentialGroup()
                        .addComponent(horribleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(badTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(okTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(strongTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(123, 123, 123))
        );

        masterPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {clearButton, submitButton});

        masterPanelLayout.setVerticalGroup(
            masterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, masterPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(54, 54, 54)
                .addComponent(passwordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(masterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(horribleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(okTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(strongTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(badTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(resultLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addComponent(submitButton)
                .addGap(18, 18, 18)
                .addComponent(clearButton)
                .addGap(31, 31, 31))
        );

        masterPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {clearButton, submitButton});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(masterPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(masterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Password_Strength.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Password_Strength.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Password_Strength.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Password_Strength.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Frame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JTextField badTextField;
    private javax.swing.JButton clearButton;
    private static javax.swing.JTextField horribleTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel masterPanel;
    private static javax.swing.JTextField okTextField;
    private static javax.swing.JTextField passwordTextField;
    private static javax.swing.JLabel resultLabel;
    private static javax.swing.JTextField strongTextField;
    private javax.swing.JButton submitButton;
    // End of variables declaration//GEN-END:variables
}
